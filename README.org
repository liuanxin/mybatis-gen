
** 说明

  本插件基于 mybatis generator 生成. 在原有的基础上生成了一些额外的东西(如新生成一个空的 xml 实现), 去掉了一些东西(如实体类的 set get)

: 一共会生成 5 个文件
: model      : 跟数据库表关联的对象
: example    : 操作数据库的 example 对象, 跟上面的平级
: repository : 接口文件
: xml        : 自动生成的 xml 文件(sql 语句), 主要是上面接口文件的实现
: custom xml : 一个空的 xml 文件, 主要用来添加项目后期自己编写的 sql

#+BEGIN_SRC
<javaClientGenerator type="MAPPER" targetPackage="${xxx}" targetProject="${targetPath}/java">
  <property name="enableSubPackages" value="true" />
</javaClientGenerator>
#+END_SRC

上面的 type 有下面这四种生成方式
: ANNOTATEDMAPPER > 全部生成 Java 代码, example 的 sql 会有一个 SqlProvider 来生成
: MIXEDMAPPER > 一半 Java 代码, 一半 xml, 简单 sql 由注解生成, example 的 sql 由 xml 生成
: XMLMAPPER > 生成 xml 实现
: MAPPER > 生成 xml 实现, 跟 XMLMAPPER 一样

添加了两种
: ALIAS > 生成 xml 实现, 每个表会在 sql 和 result map 中多加一个别名, 供多表时使用
: ALIASANDEMPTY > 除了上面的别名, 使用 Ognl 类的方法而不止是用 != 来进行比较


** 使用

+  设置 ~var.properties~ 文件内容, 配置成要生成代码的相关数据库连接信息  
+  运行 ~com.github.mte.SqlGenTest~ 类. 测试类将会输出类似下面的 xml
#+BEGIN_SRC xml
<table tableName="t_config" domainObjectName="Config" escapeWildcards="true"
		 enableCountByExample="true" enableUpdateByExample="true" enableDeleteByExample="true"
		 enableSelectByExample="true" delimitIdentifiers="true" delimitAllColumns="true"/>
#+END_SRC

+  将需要生成代码的相关配置复制到 ~generatorConfig.xml~ 文件的最底下
+  设置 ~generator.properties~ 文件, 修改数据库配置包名等

运行 ~mvn clean compile~ 生成源码
